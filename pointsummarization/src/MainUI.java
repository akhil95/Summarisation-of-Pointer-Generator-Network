
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.*;
import java.net.*;
import java.io.*;

import java.util.ArrayList;
import java.util.Map.Entry;
import javax.swing.JFrame;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.util.Rotation;

import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.extractor.WordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.PieDataset;
import org.jfree.ui.RefineryUtilities;

public class MainUI extends javax.swing.JFrame {

    static String finalDocData = "";
    String EOL = "\r\n";
    String filename = "";
    String path, file_name;
    private static final long serialVersionUID = 1L;

    ArrayList<String> allInputTokens = new ArrayList<String>();
    ArrayList<String> allHotelTokens = new ArrayList<String>();
    ArrayList<String> allPolicisTokens = new ArrayList<String>();
    ArrayList<String> allMoviesTokens = new ArrayList<String>();
    ArrayList<String> mainDocumentTokens = new ArrayList<String>();
    ArrayList<Integer> allHotelTokenCounts = new ArrayList<Integer>();
    ArrayList<Integer> allPolicisTokenCounts = new ArrayList<Integer>();
    ArrayList<Integer> allMoviesTokenCounts = new ArrayList<Integer>();
    ArrayList<Integer> allIndividualCounts = new ArrayList<Integer>();
    ArrayList<String> enterword = new ArrayList<String>();
    ArrayList<String> wholedata = new ArrayList<String>();

    ArrayList<String> FileContent = new ArrayList<String>();

    int hotelCount = 0;
    int politicsCount = 0;
    int moviesCount = 0;

    String clusterCategory = "";

    ArrayList<Integer> allInputIndexes = new ArrayList<Integer>();
    ArrayList<Integer> allDotIndexes = new ArrayList<Integer>();

    ArrayList<String> allSummarizedStrings = new ArrayList<String>();
    ArrayList<String> allSummarizedString = new ArrayList<String>();

    ArrayList<String> tokens = new ArrayList<String>();
    ArrayList<Integer> frequencies = new ArrayList<Integer>();

    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        mainTextContent = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        Extract = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainTextContent.setColumns(20);
        mainTextContent.setRows(5);
        jScrollPane1.setViewportView(mainTextContent);

        jButton1.setText("fetch");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("mark");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("load first dictionary");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Data");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        Extract.setText("Extract");
        Extract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExtractActionPerformed(evt);
            }
        });

        input.setColumns(20);
        input.setRows(5);
        jScrollPane3.setViewportView(input);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Extract, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jButton1)
                            .addContainerGap()))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Extract)
                            .addComponent(jButton2)
                            .addComponent(jButton4)
                            .addComponent(jButton3))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {

            allDotIndexes.clear();
            JFileChooser fi = new JFileChooser();
            fi.setCurrentDirectory(new java.io.File("."));
            FileFilter filter = new FileNameExtensionFilter("all document files", "doc", "docx");
            fi.setFileFilter(filter);
            fi.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (fi.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                //  filename = fi.getSelectedFile().toString();
                filename = fi.getSelectedFile().getAbsolutePath();
                File fn1 = new File(filename);
                file_name = fn1.getName();

                System.out.println(filename);
                path = filename;
            }

            System.out.println(filename);

            if (filename.endsWith("docx")) {
                File file = new File(filename);
                FileInputStream fis = new FileInputStream(file.getAbsolutePath());
                XWPFDocument document = new XWPFDocument(fis);
                List<XWPFParagraph> paragraphs = document.getParagraphs();
                // System.out.println("Total no of paragraph "+paragraphs.size());
                for (XWPFParagraph para : paragraphs) {
                    String par = para.getText();
                    finalDocData += par + EOL;
                    mainTextContent.setLineWrap(true);
                    mainTextContent.setWrapStyleWord(true);
                    mainTextContent.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);
                    // mainTextContent.setText(finalDocData);
                    MutableAttributeSet set = new SimpleAttributeSet();
                    StyleConstants.setLineSpacing(set, 1);

                }
                mainTextContent.append(finalDocData);
                wholedata.add(finalDocData);

                fis.close();
            } else {
                File file = new File(filename);
                FileInputStream fis = new FileInputStream(file.getAbsolutePath());

                HWPFDocument doc = new HWPFDocument(fis);
                WordExtractor we = new WordExtractor(doc);
                String[] paragraphs = we.getParagraphText();
                for (String para : paragraphs) {
                    String par = para;
                    finalDocData += par + EOL;
                    mainTextContent.append(finalDocData);
                    //System.out.println(par);
                    finalDocData = "";
                }
                fis.close();
            }
            char character = '.';
            String string = mainTextContent.getText();
          
            for (int i = 0; i < string.length(); i++) {
                if (string.charAt(i) == character) {
                    allDotIndexes.add(i);
                }
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            allSummarizedStrings.clear();
            allInputTokens.clear();
            allInputIndexes.clear();
            Highlighter highlighter = mainTextContent.getHighlighter();
            HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
            mainTextContent.setHighlighter(highlighter);
            String wholeData = mainTextContent.getText();
            String inputText = input.getText();
            /**
             * ******inputdata******
             */
            StringTokenizer st = new StringTokenizer(inputText, " ");
            while (st.hasMoreTokens()) {
                allInputTokens.add(st.nextToken());
            }

            for (int j = 0; j < allInputTokens.size(); j++) {
                String token = allInputTokens.get(j);
                int index = wholeData.indexOf(token);
                allInputIndexes.clear();
                while (index >= 0) {

                    allInputIndexes.add(index);
                    // System.out.println("Index : "+index);
                    index = wholeData.indexOf(token, index + token.length());

                }

                for (int i = 0; i < allInputIndexes.size(); i++) {
                    int start = allInputIndexes.get(i);
                    // int mid=allInputIndexes.get(i);
                    int end = start + token.length();
                    highlighter.addHighlight(start, end, painter);
                    //System.out.println(start);

                }

            }

            //allSummarizedStrings
            //allDotIndexes
            for (int i = 0; i < allDotIndexes.size() - 1; i++) {
                int firstIndex = allDotIndexes.get(i);
                int endIndex = allDotIndexes.get(i + 1);
                for (int j = 0; j < allInputIndexes.size(); j++) {
                    int midIndex = allInputIndexes.get(j);

                    if (midIndex >= firstIndex && midIndex < endIndex) {
                        allSummarizedStrings.add(wholeData.substring(firstIndex + 1, endIndex));
                        allSummarizedString.add(wholeData.substring(firstIndex + 1, endIndex));
                    }
                }
            }

            Set set = new HashSet(allSummarizedStrings);
            allSummarizedStrings.clear();
            allSummarizedStrings.addAll(set);
            for (int i = 0; i < allSummarizedStrings.size(); i++) {
                System.out.println(allSummarizedStrings.get(i));

            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            allHotelTokens.clear();
            allPolicisTokens.clear();
            allMoviesTokens.clear();
            mainDocumentTokens.clear();

            allHotelTokenCounts.clear();
            allPolicisTokenCounts.clear();
            allMoviesTokenCounts.clear();

            allIndividualCounts.clear();

            LoadSVMFirstDictionary hotelsT = new LoadSVMFirstDictionary();
            allHotelTokens = hotelsT.getKeyWordList("hotel.txt");
            LoadSVMFirstDictionary politicssT = new LoadSVMFirstDictionary();
            allPolicisTokens = politicssT.getKeyWordList("politics.txt");
            LoadSVMFirstDictionary moviesT = new LoadSVMFirstDictionary();
            allMoviesTokens = moviesT.getKeyWordList("movie.txt");

            String allDocumentData = mainTextContent.getText();
            StringTokenizer st = new StringTokenizer(allDocumentData, EOL);
            while (st.hasMoreTokens()) {
                String docLine = st.nextToken();
                StringTokenizer st1 = new StringTokenizer(docLine, " ");
                while (st1.hasMoreTokens()) {
                    mainDocumentTokens.add(st1.nextToken());
                }
            }

            for (int i = 0; i < allHotelTokens.size(); i++) {
                String token = allHotelTokens.get(i);
                allHotelTokenCounts.add(Collections.frequency(mainDocumentTokens, token));
            }
            for (int i = 0; i < allPolicisTokens.size(); i++) {
                String token = allPolicisTokens.get(i);
                allPolicisTokenCounts.add(Collections.frequency(mainDocumentTokens, token));
            }
            for (int i = 0; i < allMoviesTokens.size(); i++) {
                String token = allMoviesTokens.get(i);
                allMoviesTokenCounts.add(Collections.frequency(mainDocumentTokens, token));
            }
            /*
              hotelCount
politicsCount
moviesCount
             */
            for (int i = 0; i < allHotelTokenCounts.size(); i++) {
                int hCount = allHotelTokenCounts.get(i);
                hotelCount += hCount;
            }
            for (int i = 0; i < allPolicisTokenCounts.size(); i++) {
                int pCount = allPolicisTokenCounts.get(i);
                politicsCount += pCount;
            }
            for (int i = 0; i < allMoviesTokenCounts.size(); i++) {
                int mCount = allMoviesTokenCounts.get(i);
                moviesCount += mCount;
            }

            System.out.println(hotelCount + " " + politicsCount + " " + moviesCount);
            allIndividualCounts.add(hotelCount);
            allIndividualCounts.add(politicsCount);
            allIndividualCounts.add(moviesCount);

            int max = Collections.max(allIndividualCounts);
            int index = allIndividualCounts.indexOf(max);
            if (index == 0) {
                clusterCategory = "hotel";
            }
            if (index == 1) {
                clusterCategory = "politics";
            }
            if (index == 2) {
                clusterCategory = "movie";
            }

            String clusterPath = filename.substring(filename.lastIndexOf("/") + 1, filename.length());
            String actClusterPath = clusterCategory + "/" + clusterPath;

            FileOutputStream fos = new FileOutputStream(actClusterPath);
            fos.write(allDocumentData.getBytes());
            fos.close();

            JOptionPane.showMessageDialog(null, "The selected document clustered to " + clusterCategory);

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        try {

            String comData = mainTextContent.getText();
            System.out.println(comData);
            // System.out.println("KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK" + wholedata);
            FileOutputStream ff = new FileOutputStream("Tempo.txt");
            for (int i = 0; i < wholedata.size(); i++) 
            {
                String data = wholedata.get(i);
                ff.write(data.getBytes());
            }

            //code to flush sentenses to file ..start
            allSummarizedStrings.remove("");
            String allWords = "";
            for (int i = 0; i < allSummarizedStrings.size(); i++) {
                allWords += allSummarizedStrings.get(i) + EOL;
            }
            allWords = allWords.trim();
            System.out.println(allWords);
            FileOutputStream fos = new FileOutputStream("sentences.txt");
            fos.write(allWords.getBytes());
            fos.close();
            
            Runtime.getRuntime().exec("notepad sentences.txt");
            
            
            //code to flush sentenses to file ..end

            JFrame frame = new JFrame();
            Vector<Vector> rowData = new Vector<Vector>();
            rowData.clear();
            rowData.clear();
            Vector<String> row = null;

            Vector<String> columnNames = new Vector<String>();
            columnNames.clear();

            String inputText1 = input.getText();
            columnNames.addElement(inputText1);

            for (int i = 0; i < allSummarizedStrings.size(); i++) {
                row = new Vector<String>();
                row.add(allSummarizedStrings.get(i).trim());
                rowData.add(row);

            }

            JTable table = new JTable(rowData, columnNames);
            JTableHeader header = table.getTableHeader();
            DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
            dtcr.setHorizontalTextPosition(DefaultTableCellRenderer.CENTER);
            //    header.setDefaultRenderer(new KeepSortIconHeaderRenderer(header.getDefaultRenderer()));
            //  table.getTableHeader().setDefaultRenderer(new HeaderRenderer());

            JScrollPane scrollPane = new JScrollPane(table);

            frame.add(scrollPane, BorderLayout.CENTER);
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(1300, 1400);
            //frame.setTitle(selItem);
            frame.setVisible(true);
            frame.setResizable(true);

            //bar frequency code start...
            tokens.clear();
            frequencies.clear();

            //  String inputText1 = input.getText();
            StringTokenizer st = new StringTokenizer(inputText1, " ");
            while (st.hasMoreTokens()) {
                tokens.add(st.nextToken());
            }

            System.out.println(tokens);
            int tempCounter = 0;

            for (int j = 0; j < tokens.size(); j++) {
                tempCounter = 0;
                String token = tokens.get(j);
                System.out.println(token);

                for (int i = 0; i < allSummarizedString.size(); i++) {
                    String sumString = allSummarizedString.get(i);
                    System.out.println(sumString);
                    if (sumString.contains(token)) {
                        ++tempCounter;
                    }
                }
                frequencies.add(tempCounter);

                //   tempCounter = 0;
            }
            String input2 = input.getText();
            int freq = Collections.frequency(allSummarizedString, input2);
            System.out.println(freq);
            System.out.println(tokens);
            String data = input.getText();
            try {
                Socket s = new Socket("localhost", 6666);
                DataOutputStream dout = new DataOutputStream(s.getOutputStream());
                dout.writeUTF(data);
                dout.flush();
                dout.close();
                s.close();
                System.out.println("sending dataaaaaaa");
            } catch (Exception e) {
                System.out.println(e);

            }

            /*  final Barchart demo = new Barchart("=Point Summarization=",tokens,frequencies);
                demo.pack();
                RefineryUtilities.centerFrameOnScreen(demo);
                 demo.setVisible(true);
             */
           /* PieChart demo = new PieChart("Comparison", "different keywords", tokens, frequencies);
            demo.pack();
            demo.setVisible(true);*/

            //PieChart.createDataset(tokens,frequencies);
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void ExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExtractActionPerformed
        try {
            String str = mainTextContent.getText();
            //System.out.println("!!!!!!!!!!!!!!!!!!!!");
            String str2 = str.replace(".", " ");
            String str3 = str2.replace(",", " ");
            String str4 = str3.replace("'", " ");
            String[] arr = str4.split(" ");
            for (int i = 0; i < arr.length; i++) {
                //System.out.println(arr[i]);
                int a = arr[i].length();
               System.out.println( arr[i]);
                if (a >= 8) {
                    System.out.println(arr[i] + " " + a);

                    input.append(arr[i].trim() + " ");
                }

            }

            // System.out.println(str);
        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_ExtractActionPerformed

    public ArrayList<String> getinfo() {
        ArrayList<String> aa1 = new ArrayList<String>();
        try {
            FileInputStream fin = new FileInputStream("Tempo.txt");
            byte[] b1 = new byte[fin.available()];
            fin.read(b1);
            String fcont = new String(b1);

            aa1.add(fcont);
            System.out.println("+++++++++++++++++++");
            System.out.println(fcont);
        } catch (Exception e) {

        }

        //aa1.add("KIRAN KUMAR");
        //System.out.println("KLKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKk");
        // System.out.println(aa1);
        return aa1;
    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Extract;
    private javax.swing.JTextArea input;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea mainTextContent;
    // End of variables declaration//GEN-END:variables
}
